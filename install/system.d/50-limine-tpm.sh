#!/usr/bin/env bash

set -euo pipefail

# Provision Limine, integrate snapshot boot entries, and enroll TPM2 auto-unlock when available.

STATE_FILE=${1:? "State file path required"}

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
REPO_ROOT=$(cd "$SCRIPT_DIR/.." && pwd)

source "$REPO_ROOT/install/lib/common.sh"

if ! command -v limine >/dev/null 2>&1; then
	log_warn "Limine not installed; skipping bootloader configuration"
	exit 0
fi

configure_limine_defaults() {
	local limine_config cmdline efi=""

	[[ -f /boot/EFI/BOOT/limine.conf || -f /boot/EFI/limine/limine.conf ]] && efi=1

	if [[ -f /boot/EFI/BOOT/limine.conf ]]; then
		limine_config=/boot/EFI/BOOT/limine.conf
	elif [[ -f /boot/EFI/limine/limine.conf ]]; then
		limine_config=/boot/EFI/limine/limine.conf
	elif [[ -f /boot/limine/limine.conf ]]; then
		limine_config=/boot/limine/limine.conf
	else
		log_warn "Limine config not found; skipping snapshot defaults"
		return
	fi

	cmdline=$(grep '^[[:space:]]*cmdline:' "$limine_config" | head -1 | sed 's/^[[:space:]]*cmdline:[[:space:]]*//')
	[[ -z "$cmdline" ]] && cmdline="quiet splash"
	[[ "$cmdline" == *quiet* ]] || cmdline+=" quiet"
	[[ "$cmdline" == *splash* ]] || cmdline+=" splash"

	cat <<EOF >/etc/default/limine
TARGET_OS_NAME="Arch Linux"

ESP_PATH="/boot"

KERNEL_CMDLINE[default]="$cmdline"

ENABLE_UKI=yes
ENABLE_LIMINE_FALLBACK=yes
FIND_BOOTLOADERS=yes
BOOT_ORDER="*, *fallback, Snapshots"
MAX_SNAPSHOT_ENTRIES=5
SNAPSHOT_FORMAT_CHOICE=5
EOF

	if [[ -z "$efi" ]]; then
		sed -i '/^ENABLE_UKI=/d;/^ENABLE_LIMINE_FALLBACK=/d' /etc/default/limine
	fi

	cat <<'EOF' >/boot/limine.conf
### Generated by installer - re-run install.sh to refresh
default_entry: 2
interface_branding: Arch Linux Bootloader
hash_mismatch_panic: no

term_background: 1a1b26
term_palette: 15161e;f7768e;9ece6a;e0af68;7aa2f7;bb9af7;7dcfff;a9b1d6
term_palette_bright: 414868;f7768e;9ece6a;e0af68;7aa2f7;bb9af7;7dcfff;c0caf5
term_foreground: c0caf5
EOF

	if command -v pacman >/dev/null 2>&1 && pacman -Q limine-snapper-sync >/dev/null 2>&1; then
		systemctl enable --now limine-snapper-sync.service >/dev/null 2>&1 || true
	else
		log_warn "limine-snapper-sync not installed; snapshot boot entries will be unavailable"
	fi
}

configure_mkinitcpio() {
	local hooks mkinit=/etc/mkinitcpio.conf

	if [[ ! -f "$mkinit" ]]; then
		return
	fi

	if [[ "$IS_ENCRYPTED" == "1" ]]; then
		hooks='base systemd autodetect modconf kms keyboard keymap consolefont block sd-encrypt filesystems btrfs-overlayfs fsck'
	else
		hooks='base systemd autodetect modconf kms keyboard keymap consolefont block filesystems btrfs-overlayfs fsck'
	fi

	local backup="$mkinit.arch-bootstrap.bak"
	cp "$mkinit" "$backup"
	log_info "Backed up mkinitcpio.conf to $backup"

	sed -i 's/^MODULES=.*/MODULES=(btrfs)/' "$mkinit"
	sed -i 's/^BINARIES=.*/BINARIES=()/' "$mkinit"
	sed -i 's/^FILES=.*/FILES=()/' "$mkinit"

	if grep -q '^HOOKS=' "$mkinit"; then
		sed -i "s/^HOOKS=.*/HOOKS=($hooks)/" "$mkinit"
	else
		echo "HOOKS=($hooks)" >>"$mkinit"
	fi
}

configure_tpm_unlock() {
	if [[ "$IS_ENCRYPTED" != "1" ]]; then
		log_info "Root filesystem not encrypted; skipping TPM enrollment"
		return
	fi

	local luks_device device_uuid encryption_password
	local root_mapper="$ROOT_MAPPER"

	luks_device=$(cryptsetup status "$root_mapper" 2>/dev/null | awk '/device:/ {print $2}')
	if [[ -z "$luks_device" ]]; then
		log_warn "Unable to discover LUKS backing device for $root_mapper"
		return
	fi

	device_uuid=$(blkid -s UUID -o value "$luks_device")
	if [[ -z "$device_uuid" ]]; then
		log_warn "Unable to read UUID for $luks_device"
		return
	fi

	ensure_directory /etc
	cat <<EOF >/etc/crypttab
cryptroot UUID=$device_uuid - tpm2-device=auto
EOF
	cat <<EOF >/etc/crypttab.initramfs
cryptroot UUID=$device_uuid - tpm2-device=auto
EOF

	encryption_password=$(json_get "$STATE_FILE" '.encryption_password')
	if [[ -n "$encryption_password" && "$encryption_password" != "null" ]]; then
		if ! systemd-cryptenroll --list "$luks_device" | grep -q 'tpm2'; then
			log_info "Enrolling TPM2 unlock for $luks_device"
			printf '%s' "$encryption_password" | systemd-cryptenroll --password --tpm2-device=auto "$luks_device"
		else
			log_info "TPM2 slot already present on $luks_device"
		fi
	else
		log_warn "Encryption password unavailable; skipping TPM enrollment"
	fi
}

ROOT_MAPPER=$(findmnt -n -o SOURCE / || true)
IS_ENCRYPTED=0
if [[ -n "$ROOT_MAPPER" && "$ROOT_MAPPER" == /dev/mapper/* ]]; then
	IS_ENCRYPTED=1
fi

configure_limine_defaults
configure_mkinitcpio
configure_tpm_unlock

if command -v mkinitcpio >/dev/null 2>&1; then
	mkinitcpio -P
fi

limine-update || true
